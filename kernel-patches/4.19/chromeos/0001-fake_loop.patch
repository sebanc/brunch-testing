--- a/drivers/block/loop.c	2021-12-23 08:31:57.000000000 +0100
+++ b/drivers/block/loop.c	2021-12-28 12:22:27.849468253 +0100
@@ -2002,6 +2002,10 @@
 	}
 	if (err < 0)
 		goto out_free_dev;
+	if (err > 4096) {
+		err = -ENOMEM;
+		goto out_free_dev;
+	}
 	i = err;
 
 	err = -ENOMEM;
@@ -2035,7 +2039,10 @@
 	blk_queue_flag_set(QUEUE_FLAG_NOMERGES, lo->lo_queue);
 
 	err = -ENOMEM;
-	disk = lo->lo_disk = alloc_disk(1 << part_shift);
+	if (i != 4096)
+		disk = lo->lo_disk = alloc_disk(1 << part_shift);
+	else
+		disk = lo->lo_disk = alloc_disk(1 << fls(16));
 	if (!disk)
 		goto out_free_queue;
 
@@ -2057,7 +2064,7 @@
 	 * complicated, are too static, inflexible and may surprise
 	 * userspace tools. Parameters like this in general should be avoided.
 	 */
-	if (!part_shift)
+	if (!part_shift && i != 4096)
 		disk->flags |= GENHD_FL_NO_PART_SCAN;
 	disk->flags |= GENHD_FL_EXT_DEVT;
 	atomic_set(&lo->lo_refcnt, 0);
@@ -2068,7 +2075,10 @@
 	disk->fops		= &lo_fops;
 	disk->private_data	= lo;
 	disk->queue		= lo->lo_queue;
-	sprintf(disk->disk_name, "loop%d", i);
+	if (i != 4096)
+		sprintf(disk->disk_name, "loop%d", i);
+	else
+		sprintf(disk->disk_name, "sdz");
 	add_disk(disk);
 	*l = lo;
 	return lo->lo_number;
@@ -2224,7 +2234,7 @@
 	int err;
 
 	part_shift = 0;
-	if (max_part > 0) {
+	if (0 && max_part > 0) {
 		part_shift = fls(max_part);
 
 		/*
@@ -2281,6 +2291,7 @@
 	mutex_lock(&loop_ctl_mutex);
 	for (i = 0; i < nr; i++)
 		loop_add(&lo, i);
+	loop_add(&lo, 4096);
 	mutex_unlock(&loop_ctl_mutex);
 
 	printk(KERN_INFO "loop: module loaded\n");
